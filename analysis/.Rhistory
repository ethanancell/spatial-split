))
}
plot
}
view_dist_sm(3, plotnormal=TRUE)
region <- 3
bw <- 0.01
plotnormal=TRUE
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[region]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = sm_8), binwidth=bw, color="black")
if (plotnormal == TRUE) {
mean <- mean(region_df$sm_8)
sd <- sd(region_df$sm_8)
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean,
sd=sd*bw*n_obs
))
}
plot
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=sd(region_df$sm_8)*bw*n_obs
))
}
plot
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=1
))
}
plot
sd(region_df$sm_8)
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=0.08733
))
}
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[region]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = sm_8), binwidth=bw, color="black")
# Optionally plot the normal curve on top
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=0.08733
))
}
plot
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[region]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = sm_8), binwidth=bw, color="black")
# Optionally plot the normal curve on top
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=0.08733*bw*n_obs
))
}
plot
0.08733*bw*n_obs
bw
n_obs
n_obs <- dim(region_df)[3]
n_obs
region_df <- partitioned_data[[region]]
region_df
dim(region_df)
dim(region_df)[1]
n_obs <- dim(region_df)[region]
n_obs
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[1]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = sm_8), binwidth=bw, color="black")
# Optionally plot the normal curve on top
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=0.08733*bw*n_obs
))
}
plot
view_dist_sm(1)
view_dist_sm(1, plotnormal=TRUE)
view_dist_sm <- function(region, bw=0.01, plotnormal=FALSE) {
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[1]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = sm_8), binwidth=bw, color="black")
# Optionally plot the normal curve on top
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=sd(region_df$sm_8)*bw*n_obs
))
}
plot
}
view_dist_sm(3)
view_dist_sm(3, plotnormal=TRUE)
view_dist_sm(1, plotnormal=TRUE)
view_dist_sm(2, plotnormal=TRUE)
view_dist_sm(3, plotnormal=TRUE)
view_dist_sm(4, plotnormal=TRUE)
view_dist_sm <- function(region, bw=0.01, plotnormal=FALSE) {
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[1]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = sm_8), binwidth=bw, color="black")
# Optionally plot the normal curve on top
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=sd(region_df$sm_8)*bw*n_obs
))
}
plot
}
view_dist_sm(4, plotnormal=TRUE)
library(gstat)
# Output to a csv for further exploration
write.csv(post_soil_data, "post_classification.csv")
library(gstat)
setwd("C:/Users/ethan/Box/ethan_project_2020/code/learn/maps/analysis")
soil <- read.csv("post_classification.csv")
View(soil)
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- post_soil_data %>%
filter(predictions == flevel)
}
# Extract by class
factor_amount <- length(levels(soil$predictions))
factor_amount
soil$predictions
levels(soil$predictions)
soil$predictions <- as.factor(soil$predictions)
# Extract by class
factor_amount <- length(levels(soil$predictions))
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- post_soil_data %>%
filter(predictions == flevel)
}
library(tidyverse)
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- post_soil_data %>%
filter(predictions == flevel)
}
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- soil %>%
filter(predictions == flevel)
}
View(partitioned_data)
# First let's look at class 3 since it has the most data
class3 <- partitioned_data[[3]]
View(class3)
library(sp)
coordinates(class3) = ~Longitude+Latitude
class(class3)
summary(class3)
library(ggplot2)
library(gstat)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rpart)
library(rpart.plot)
library(sf)
library(tidyverse)
theme_set(theme_bw())
# --------------------
# ------- DATA -------
# --------------------
# Load the soil measurement stations
soil_data <- read_csv("example_data.csv")
locations <- soil_data %>%
select(lat = Latitude, long = Longitude, moisture = sm_8) %>%
filter(moisture >= 0)
# We want a dataframe that is "original" but has taken out all the rows
# that were taken out in the modeling step.
post_soil_data <- filter(soil_data, sm_8 >= 0)
# Create dataframe appropriate for modeling
soil_model_df <- soil_data %>%
# Select appropriate variables
select(sm_8, elev = "Elevation(meter)", wind = "Wind Speed(m/s)",
p1day = "Precipitation for 1 day", p2day = "Precipitation for 2 days",
p3day = "Precipitation for 3 days", p4day = "Precipitation for 4 days",
p5day = "Precipitation for 5 days", long = "Longitude",
lat = "Latitude") %>%
# Take out rows with missing sm_8 (coded as -999999.0)
filter(sm_8 >= 0)
# --------------------
# ----- MODELING -----
# --------------------
# Number of terminal nodes to classify into (subregions)
subregions <- 5
# Base our model off of the soil_model_df
disjoint_model <- rpart(sm_8 ~ . -long -lat, data=soil_model_df, method="anova")
# Find the CP we need for the given number of subregions
cptable <- disjoint_model$cptable
needed_cp <- cptable[cptable[,2] == subregions-1, 1]
pruned <- prune(disjoint_model, cp = needed_cp)
# Plot tree
rpart.plot(pruned, type=1)
# Augment our predictions with the nodes
predictions <- predict(pruned)
predictions <- as.factor(predictions)
# Relabel factors with shorter output
factor_amount <- length(levels(predictions))
levels(predictions) <- 1:factor_amount
soil_model_df <- cbind(soil_model_df, predictions)
# Find the convex hull for each of the classifications
# ---------
# locs is a list, with each index item being a dataframe with latitude and longitude
# points for all soil moisture stations in the same class
locs <- vector("list", factor_amount)
convex_hulls <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
# First copy down all the locations in that class
locs[[flevel]] <- soil_model_df %>%
select(long, lat) %>%
filter(predictions == flevel)
# Fill out the convex hull
convex_hull_index <- chull(as.matrix(locs[[flevel]]))
convex_hulls[[flevel]] <- locs[[flevel]][convex_hull_index,]
}
# --------------------
# ----- PLOTTING -----
# --------------------
# Country data
world <- ne_countries(scale = "medium", returnclass = "sf")
states <- st_as_sf(map("state", plot=FALSE, fill=TRUE))
# Rough boundaries of Utah
xlimit <- c(-114.44, -108.37)
ylimit <- c(36.44, 42.19)
# Colors
class_colors <- c("dodgerblue", "khaki", "limegreen", "violet", "tomato",
"blue", "orange", "yellow", "springgreen")
# Plot soil moisture stations by "disjoint" classification
classes <- ggplot(data = world) +
geom_sf() +
geom_point(data=soil_model_df, aes(x=long, y=lat, color=predictions), size=2, shape=16)
# Add on convex polygons
for (flevel in 1:factor_amount) {
classes <- classes + geom_polygon(data=convex_hulls[[flevel]],
aes(x = long, y = lat),
alpha = 1/2,
fill = class_colors[flevel])
}
classes <- classes +
geom_sf(data=states, fill=NA) +
coord_sf(xlim=xlimit, ylim=ylimit, expand=FALSE) +
xlab("Longitude") + ylab("Latitude") +
ggtitle("Classifications")
classes
library(gstat)
library(sp)
library(tidyverse)
soil <- read.csv("post_classification.csv")
View(soil)
# Convert back to factor
soil$predictions <- as.factor(soil$predictions)
View(soil)
soil <- read.csv("post_classification.csv")
# Convert back to factor
soil$predictions <- as.factor(soil$predictions)
# Extract by class
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- soil %>%
filter(predictions == flevel)
}
# First let's look at class 3 since it has the most data
class3 <- partitioned_data[[3]]
coordinates(class3) = ~long+lat
summary(class3)
bubble(class3, "sm_8", col=c("#00ff0088", "#00ff00088"), main="Soil moisture")
bubble(class3, "sm_8", col=c("#ff0088", "#ff00088"), main="Soil moisture")
bubble(class3, "sm_8", main="Soil moisture")
# Variogram
vgm <- variogram(sm_8~1, class3)
vgm
plot(vgm)
vgm.fit <- fit.variogram(vgm, model = vgm(1, "Sph", 900, 1))
view_dist <- function(region, var, bw=0.01, plotnormal=FALSE) {
region_df <- partitioned_data[[region]]
n_obs <- dim(region_df)[1]
plot <- ggplot(region_df) +
geom_histogram(mapping = aes(x = var), binwidth=bw, color="black")
# Optionally plot the normal curve on top
if (plotnormal == TRUE) {
plot <- plot +
stat_function(fun = function(x) dnorm(
x,
mean=mean(region_df$sm_8),
sd=sd(region_df$sm_8)*bw*n_obs
))
}
plot
}
view_dist(3, sm_8)
view_dist(3, "sm_8")
region_df <- partitioned_data[[region]]
ggplot(data=class3) +
geom_histogram(mapping = aes(x = sm_8), binwidth=0.01)
ggplot(data=partitioned_data[[3]]) +
geom_histogram(mapping = aes(x = sm_8), binwidth=0.01)
class3explore <- partitioned_data[[3]]
?mutate
mutate(class3explore, log(sm_8))
mutate(class3explore, log(sm_8+1))
temp <- mutate(class3explore, log(sm_8+1))
hist(temp$`log(sm_8 + 1)`)
hist(temp$sm_8
)
temp <- mutate(class3explore, log(sm_8))
hist(temp$`log(sm_8)`)
temp <- mutate(class3explore, sqrt(sm_8))
hist(temp$`sqrt(sm_8)`)
# Add transforms
soil <- soil %>%
mutate(sqrt(sm_2), sqrt(sm_4), sqrt(sm_8), sqrt(sm_20))
# Add transforms
soil <- soil %>%
mutate(sqrt(sm_2), sqrt(sm_4), sqrt(sm_8), sqrt(sm_20)) %>%
rename(sqrt_sm_8 = `sqrt(sm_8)`)
View(soil)
# Add transforms
soil <- soil %>%
mutate(sqrt(sm_2), sqrt(sm_4), sqrt(sm_8), sqrt(sm_20)) %>%
rename(sqrt_sm_2 = `sqrt(sm_2)`, sqrt_sm_4 = `sqrt(sm_4)`,
sqrt_sm_8 = `sqrt(sm_8)`, sqrt_sm_20 = `sqrt(sm_20)`)
# Extract by class
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- soil %>%
filter(predictions == flevel)
}
soil <- read.csv("post_classification.csv")
# Convert back to factor
soil$predictions <- as.factor(soil$predictions)
# Add transforms
soil <- soil %>%
mutate(sqrt(sm_2), sqrt(sm_4), sqrt(sm_8), sqrt(sm_20)) %>%
rename(sqrt_sm_2 = `sqrt(sm_2)`, sqrt_sm_4 = `sqrt(sm_4)`,
sqrt_sm_8 = `sqrt(sm_8)`, sqrt_sm_20 = `sqrt(sm_20)`)
# Extract by class
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- soil %>%
filter(predictions == flevel)
}
# Explore class3
class3 <- partitioned_data[[3]]
View(class3)
# Variogram
vgm <- variogram(sqrt_sm_8~1, class3)
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3)
# Explore class3
class3explore <- partitioned_data[[3]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
vgm.fit <- fit.variogram(vgm, model = vgm(1, "Sph", 900, 1))
class3explore <- partitioned_data[[3]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
class3explore <- partitioned_data[[2]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
class3explore <- partitioned_data[[1]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
class3explore <- partitioned_data[[4]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
class3explore <- partitioned_data[[5]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
soil <- read.csv("post_classification.csv")
# Convert back to factor
soil$predictions <- as.factor(soil$predictions)
# Add transforms
soil <- soil %>%
mutate(sqrt(sm_2), sqrt(sm_4), sqrt(sm_8), sqrt(sm_20)) %>%
rename(sqrt_sm_2 = `sqrt(sm_2)`, sqrt_sm_4 = `sqrt(sm_4)`,
sqrt_sm_8 = `sqrt(sm_8)`, sqrt_sm_20 = `sqrt(sm_20)`)
# Extract by class
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- soil %>%
filter(predictions == flevel)
}
# Explore class3
class3explore <- partitioned_data[[5]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
View(partitioned_data)
class3explore <- partitioned_data[[1]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
class3explore <- partitioned_data[[2]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
class3explore <- partitioned_data[[3]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
# Explore class3
class3explore <- partitioned_data[[4]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
hist(class3explore$sqrt_sm_8)
# Explore class3
class3explore <- partitioned_data[[11]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~1, data=class3explore)
plot(vgm)
plot(sqrt_sm_8~sqrt(dist), class3explore
)
View(partitioned_data)
# Explore class3
class3explore <- partitioned_data[[6]]
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(sqrt_sm_8~sqrt(dist), data=class3explore)
class3explore$dist
soil <- read.csv("post_classification.csv")
# Convert back to factor
soil$predictions <- as.factor(soil$predictions)
# Add residuals column
soil <- soil %>%
mutate(raw_predictions - sm_8)
View(soil)
soil <- soil %>%
rename(resid = `raw_predictions - sm_8`)
factor_amount <- length(levels(soil$predictions))
partitioned_data <- vector("list", factor_amount)
for (flevel in 1:factor_amount) {
partitioned_data[[flevel]] <- soil %>%
filter(predictions == flevel)
}
# Explore class3
class3explore <- partitioned_data[[6]]
hist(class3explore$resid)
hist(sqrt(class3explore$resid))
hist(class3explore$resid)
hist(class3explore$resid, binwidth=0.01)
ggplot(data=class3explore) + geom_histogram(mapping = aes(x = resid), binwidth=0.01)
coordinates(class3explore) = ~long+lat
# Variogram
vgm <- variogram(resid~1, data=class3explore)
plot(vgm)
vgm.fit <- fit.variogram(vgm, model = vgm(1, "Sph", 900, 1))
?runif
